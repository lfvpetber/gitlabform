projects_and_groups:

  # (TODO: migrate this whole file into the new docs "reference" per config section...)

  # settings for ALL projects in 'my-group' group
  "my-group/*":

    # *** This section requires GitLab Premium (paid) ***
    project_push_rules:
      # keys and values here are as described at
      # https://docs.gitlab.com/ee/api/projects.html#add-project-push-rule
      # ...except the id, as we allow managing only a single rule as of now
      commit_message_regex: 'Fixes \d +'
      branch_name_regex: ""
      deny_delete_tag: false
      member_check: false
      prevent_secrets: false
      author_email_regex: ""
      file_name_regex: ""
      max_file_size: 0 # in MB, 0 means unlimited

    # keys names are branches names and values can be as shown below
    # https://docs.gitlab.com/ee/api/protected_branches.html
    # the access level are as their names listed in https://docs.gitlab.com/ee/api/members.html
    branches:
      develop:
        # this will unprotect a branch if it is protected currently
        protected: false
      main:
        # Configure "main" to require code approvals, merge for developers, no direct commits
        protected: true
        push_access_level: no access
        merge_access_level: developer
        unprotect_access_level: maintainer
        # *** Below key requires GitLab Premium (paid) ***
        code_owner_approval_required: true
      branch_protected_from_changes:
        # Disallow any changes to this branch
        protected: true
        push_access_level: no access
        merge_access_level: no access
        unprotect_access_level: maintainer
      # Protect branches with names matching wildcards
      '*-branch_protected_from_direct_pushes_from_no_one_but_with_merges_allowed_configured_using_wildcard':
        protected: true
        push_access_level: no access
        merge_access_level: developer
        unprotect_access_level: maintainer
      # Make the branch protected but allow force pushes to this branch
      allow_to_force_push:
        protected: true
        push_access_level: developer
        merge_access_level: developer
        unprotect_access_level: maintainer
        allow_force_push: true
      # Allow specific users and groups to operate on this branch - *** this syntax requires GitLab Premium (paid) ***
      special:
        protected: true
        allowed_to_push:
          - user: jsmith # you can use usernames...
          - user: bdoe
          - group: another-group # ...or group names (paths)...
        allowed_to_merge:
          - user_id: 15 # ...or user ids, if you know them...
          - group_id: 456 # ...or group ids, if you know them...
        allowed_to_unprotect:
          - access_level: maintainer # ...or the whole access levels, like in the other syntax

    # this is for adding/changing the access level of group members and/or users
    # note: removing members from the config DOES NOT remove their access unless "enforce" flag is set to true!
    #
    # keys names are usernames/groups' paths and values are as parameters described at
    # https://docs.gitlab.com/ee/api/groups.html#create-a-link-to-share-a-group-with-another-group
    # https://docs.gitlab.com/ee/api/members.html#add-a-member-to-a-group-or-project
    group_members:
      groups:
        another-group:
          group_access: no access
      users:
        my-user:
          access_level: owner
      # if this flag is set to 'true', then removing a user or group from the above config will remove the user
      # from the group
      # note: you have to keep at least 1 user with "owner" access level group - it's required by GitLab
      enforce: true  # default: false

    # *** This section requires GitLab Premium (paid) ***
    # configure members of groups by syncing them with LDAP
    # keys are only used as labels in this config, values are as described at
    # https://docs.gitlab.com/ee/api/groups.html#add-ldap-group-link-with-cn-or-filter
    group_ldap_links:
      # "provider" field should contain a value that you can find in the GitLab web UI,
      # see https://github.com/gdubicki/gitlabform/issues/261
      devops_are_maintainers:
        provider: "AD"
        cn: "devops"
        group_access: maintainer
      developers_are_developers:
        provider: "AD"
        filter: "(employeeType=developer)"
        group_access: developer

    # keys names are tags names and values are as parameters described at
    # https://docs.gitlab.com/ee/api/protected_tags.html
    tags:
      "v*":
        protected: true
        create_access_level: maintainer

    # these are now called "Integrations"
    # names are as in the endpoints described at https://docs.gitlab.com/ee/api/integrations.html
    # hashes under those name correspond to the parameters described for a given integration there
    # except where integrations are deleted with `delete: true`
    services:
      slack:
        delete: true
      drone-ci:
        delete: true
      jira:
        active: true
        url: https://jira.yourcompany.com
        username: foo
        password: bar

    # key names here are hook URLs and values are as parameters described at
    # https://docs.gitlab.com/ee/api/projects.html#edit-project-hook
    # except where hooks are deleted with `delete: true`
    hooks:
      "http://host.domain.com/some-old-hook-you-want-to-remove-from-config":
        delete: true
      "http://127.0.0.1:5000/hooks/merge-request":
        push_events: false # this is set to true by GitLab API by default
        merge_requests_events: true
        token: some_secret_auth_token

    # key names here are just labels,
    # values are as parameters described at
    # https://docs.gitlab.com/ee/api/group_badges.html#add-a-badge-to-a-group
    # and https://docs.gitlab.com/ee/api/group_badges.html#placeholder-tokens
    # except where badges are deleted with `delete: true`
    # and that we REQUIRE to define the "name" (to identify each badge)
    group_badges:
      group-pipeline-status:
        name: "Group Badge"
        link_url: "https://gitlab.yourcompany.com/%{project_path}/-/commits/%{default_branch}"
        image_url: "https://gitlab.yourcompany.com/%{project_path}/badges/%{default_branch}/pipeline.svg"

    # with this configuration section you can ensure that some files with appropriate content are in some or all
    # branches (or that they are NOT there)
    # note that this is gitlabform-specific feature, it DOES NOT directly correspond to GitLab API like other sections
    # (although it uses https://docs.gitlab.com/ee/api/repository_files.html)
    files:
      "README.md":
        overwrite: false
        branches:
          - develop
        # this will prevent the commit that applies this file change triggering CI build
        # default is `false`, so a file change WILL trigger CI build
        skip_ci: true
        content: |
          This is a default README. Please replace it with a proper one!
        # You can provide commit message instead of using the message automatically generated by GitLabForm.
        commit_message: Set default README
      ".gitlab-ci.yml":
        overwrite: true
        branches: all
        content: |
          stages:
            - test

          test:
            image: node:6
            stage: test
            script:
              - npm test
      "other-file":
        overwrite: true
        branches: all
        # You can provide file contents with external file too. Both absolute and relative paths are supported.
        # Relative paths are interpreted as relative to `config.yml` file location.
        file: some-file.txt
      "file-using-templating":
        overwrite: true
        branches: all
        content: |
          Simple templating is supported via jinja2 with two default variables
          {{ project }} will be replaced by project name, while {{ group }} by a group name.
          All occurences will be replaced.
      "file-escape-templating":
        branches: all
        template: no
        content: |
          {{ project }} will be rendered literally
      "file-with-custom-variable":
        branches: all
        content: |
          {{ foo }} and {{ bar }} are defined by you, but currently only dict is supported for jinja_env.
          Group: {{ group }} and project: {{ project }} are always accessable by jinja.
        jinja_env:
          foo: "fooz"
          bar: "barz"
      "file-to-set-in-protected-branches":
        branches: protected
        content: |
          This file will be added to all protected branches.

  # settings for ALL projects in 'old-projects-group' group
  old-projects-group/*:
    # this will archive all the projects in the 'old-projects-group' group
    project:
      # note: you can also unarchive a project by setting this to 'false' but then you need to run
      # the app with --include-archived-projects option
      archive: true

  group-with-spammy-projects/*:
    # configures settings for the 'group-with-spammy-projects' group
    group_settings:
      # keys and values here are as described at https://docs.gitlab.com/ee/api/groups.html#update-group
      emails_disabled: true

  # settings specific to 'my-group/my-project1' project
  "my-group/my-project1":
    hooks:
      skip: true # this will skip whole hooks config *section* for this project, although it is set on group level

    files:
      "some-file":
        overwrite: true
        branches:
          - develop
          - main
        # setting below value to `true` will make this file be set only for the first *existing* branch in the list above
        only_first_branch: true
        content: |
          We want this file to be set only in the first existing branch from the branch list above.

      "some-path/garbage-file":
        delete: true
        branches:
          - develop
          - main
        skip_ci: true
      "other-file":
        skip: true # this will skip processing this *single file* in case it is configured on a group level

    # this is for adding/changing the access level of project members - groups and/or users
    # note: removing members from the config DOES NOT remove their access unless "enforce" flag is set to true!
    #
    # keys names are usernames/groups' paths and values are as parameters described at
    # https://docs.gitlab.com/ee/api/projects.html#share-project-with-group
    # https://docs.gitlab.com/ee/api/members.html#add-a-member-to-a-group-or-project
    members:
      groups:
        my-group:
          group_access: maintainer
        my-other-group/subgroup:
          group_access: maintainer
      users:
        my-user:
          access_level: maintainer
          expires_at: 2025-09-26
      # if this flag is set to 'true', then this project will have only the users and groups listed above as the *direct*
      # members (so this setting will NOT affect the members inherited f.e. from a group that contains this project)
      # note: there has to be at least 1 user/group with "owner" access level per project - it's required by GitLab
      enforce: true

    # this is for adding/changing/deleting pipeline schedules
    #
    # keys names are schedule descriptions and values are parameters described at
    # https://docs.gitlab.com/ee/api/pipeline_schedules.html
    #
    # note: if there multiple pipeline schedules with the same description in GitLab project, corresponding entry
    # will cause those schedules to be DELETED and replaced with the one from the configuration
    # if there is exactly one schedule with the corresponding description, only parameters provided in the configuration
    # will be updated
    #
    # timezone defaults to 'UTC', valid values must be supported by ActiveSupport::TimeZone and can be taken e.g.
    # from https://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html
    schedules:
      "Some schedule":
        ref: main
        cron: "0 * * * MON-FRI"
        cron_timezone: "London"
        active: false
      "Another schedule":
        ref: develop
        cron: "0 * * * *"
        variables:
          some_variable:
            value: some_value
            variable_type: file # optional parameter, defaults to 'env_var'
          other_variable:
            value: another_value
      # this one will be deleted if exists
      "Obsolete schedule":
        delete: true

    # key names here are just labels,
    # values are as parameters described at
    # https://docs.gitlab.com/ee/api/project_badges.html#add-a-badge-to-a-project
    # and https://docs.gitlab.com/ee/api/project_badges.html#placeholder-tokens
    # except where badges are deleted with `delete: true`
    # and that we REQUIRE to define the "name" (to identify each badge)
    badges:
      old-badge-to-delete:
        name: "a-badge"
        delete: true
